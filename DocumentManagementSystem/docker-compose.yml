services:
  postgres:
    image: postgres:16
    environment:
      POSTGRES_DB: DocumentManagement
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5433:5432"
    volumes:
      - dbdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d DocumentManagement"]
      interval: 5s
      timeout: 5s
      retries: 5

  api:
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      ASPNETCORE_URLS: http://+:8081
      ConnectionStrings__DefaultConnection: "Host=postgres;Port=5432;Database=DocumentManagement;Username=postgres;Password=postgres"

      # RabbitMQ Settings
      RabbitMq__Host: rabbitmq
      RabbitMq__User: guest
      RabbitMq__Password: guest
    ports:
      - "8081:8081"

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:80"
    depends_on:
      - api

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 5s
      timeout: 5s
      retries: 10
    volumes:
      - rabbitmqdata:/var/lib/rabbitmq

  ocrworker:   # 🚀 NEU: Worker-Service
    build:
      context: ../OcrWorker   # Ordner wo dein Worker liegt
      dockerfile: Dockerfile
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      RabbitMq__Host: rabbitmq
      RabbitMq__User: guest
      RabbitMq__Password: guest
    restart: always   # Worker läuft immer mit

volumes:
  dbdata:
  rabbitmqdata:
